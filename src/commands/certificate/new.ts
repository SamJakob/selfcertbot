import { Command, Flags } from '@oclif/core';
import * as path from 'path';
import { getCADirectory } from '../../utils/config';
import * as fs from 'node:fs/promises';
import { createDirIfNotExists } from '../../utils/files';
import { Executor } from '../../utils/execute';
import * as inquirer from 'inquirer';

export default class CertificateNew extends Command {
  static description = 'Sign a new certificate and output it in the current directory.';

  static examples = [
    '<%= config.bin %> <%= command.id %>',
  ];

  static flags = {
    output: Flags.string({ char: 'o', description: 'directory to output certificates in' }),
  };

  static args = [
    {
      name: 'name',
      required: true,
      description: 'The name of the service the certificates are being generated for. (For a website, this will be your FQDN).'
    }
  ];

  getOutputFileName(outputDir: string, basename: string) : string {
    return path.join(outputDir, basename);
  }

  public async run(): Promise<void> {
    const { args, flags } = await this.parse(CertificateNew);

    // Read '.selfcertbot' configuration file.
    const caDir = await getCADirectory();
    let outputDir = path.resolve(flags.output ?? path.join(process.cwd(), args.name));
    await createDirIfNotExists(outputDir);
    outputDir = await fs.realpath(outputDir);

    const executor = new Executor({
      cwd: outputDir
    });

    const names: string = (await inquirer.prompt([
      {
        type: 'input',
        name: 'names',
        message: 'Enter domains (space-separated)'
      }
    ])).names.split(' ').map((value: string, index: number) => `DNS.${index + 1} = ${value}\n`).join('');

    // Create certificate private key.
    await executor.process(`openssl genrsa -out ./cert.key 2048`);
    await executor.command('chmod 400 ./cert.key');

    // Create the configuration.
    const extFile = await fs.open(path.join(outputDir, 'v3.ext'), 'w');
    await extFile.write(`subjectAltName = @alt_names
basicConstraints            = CA:FALSE
nsCertType                  = server
nsComment                   = "Server Certificate (Generated by OpenSSL)"
subjectKeyIdentifier        = hash
authorityKeyIdentifier      = keyid,issuer:always
keyUsage                    = critical, digitalSignature, keyEncipherment
extendedKeyUsage            = serverAuth

[ alt_names ]
${names}
`);
    await extFile.close();

    // Create the certificate signing request.
    await executor.process(`openssl req -config ${caDir}/int.cnf -key ./cert.key -new -sha256 -out ./cert.csr`);

    // Sign the certificate.
    await executor.process(`openssl ca -config ${caDir}/int.cnf -extfile ./v3.ext -days 375 -notext -md sha256 -in ./cert.csr -out ./cert.pem`);
    await executor.command('chmod 444 ./cert.pem');

    // Clean up (remove the CSR)
    await fs.unlink(`${outputDir}/v3.ext`);
    await fs.unlink(`${outputDir}/cert.csr`);
  }
}
